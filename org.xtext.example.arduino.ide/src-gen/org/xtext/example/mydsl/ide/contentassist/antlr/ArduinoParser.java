/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalArduinoParser;
import org.xtext.example.mydsl.services.ArduinoGrammarAccess;

public class ArduinoParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ArduinoGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ArduinoGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getConnectorsAccess().getAlternatives(), "rule__Connectors__Alternatives");
			builder.put(grammarAccess.getLEVELAccess().getAlternatives(), "rule__LEVEL__Alternatives");
			builder.put(grammarAccess.getTransitionAccess().getAlternatives_0(), "rule__Transition__Alternatives_0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getComponentsAccess().getGroup(), "rule__Components__Group__0");
			builder.put(grammarAccess.getComponentsAccess().getGroup_14(), "rule__Components__Group_14__0");
			builder.put(grammarAccess.getComponent_stateAccess().getGroup(), "rule__Component_state__Group__0");
			builder.put(grammarAccess.getConnector_definitionAccess().getGroup(), "rule__Connector_definition__Group__0");
			builder.put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getWiringAccess().getGroup(), "rule__Wiring__Group__0");
			builder.put(grammarAccess.getBehaviorAccess().getGroup(), "rule__Behavior__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getTransition_effectAccess().getGroup(), "rule__Transition_effect__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getComponentsAssignment_0(), "rule__Model__ComponentsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getConnectionAssignment_1(), "rule__Model__ConnectionAssignment_1");
			builder.put(grammarAccess.getModelAccess().getBehaviorAssignment_2(), "rule__Model__BehaviorAssignment_2");
			builder.put(grammarAccess.getComponentsAccess().getNameAssignment_1(), "rule__Components__NameAssignment_1");
			builder.put(grammarAccess.getComponentsAccess().getConnectorsAssignment_12(), "rule__Components__ConnectorsAssignment_12");
			builder.put(grammarAccess.getComponentsAccess().getComponent_stateAssignment_14_3(), "rule__Components__Component_stateAssignment_14_3");
			builder.put(grammarAccess.getComponent_stateAccess().getNameAssignment_0(), "rule__Component_state__NameAssignment_0");
			builder.put(grammarAccess.getConnectionAccess().getComponentAssignment_3(), "rule__Connection__ComponentAssignment_3");
			builder.put(grammarAccess.getConnectionAccess().getWiringAssignment_4(), "rule__Connection__WiringAssignment_4");
			builder.put(grammarAccess.getComponentAccess().getComponentsAssignment_1(), "rule__Component__ComponentsAssignment_1");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_2(), "rule__Component__NameAssignment_2");
			builder.put(grammarAccess.getWiringAccess().getSrcAssignment_0(), "rule__Wiring__SrcAssignment_0");
			builder.put(grammarAccess.getWiringAccess().getSrc_portAssignment_2(), "rule__Wiring__Src_portAssignment_2");
			builder.put(grammarAccess.getWiringAccess().getTarAssignment_4(), "rule__Wiring__TarAssignment_4");
			builder.put(grammarAccess.getWiringAccess().getTar_portAssignment_6(), "rule__Wiring__Tar_portAssignment_6");
			builder.put(grammarAccess.getBehaviorAccess().getStatesAssignment_4(), "rule__Behavior__StatesAssignment_4");
			builder.put(grammarAccess.getBehaviorAccess().getTransitionsAssignment_5(), "rule__Behavior__TransitionsAssignment_5");
			builder.put(grammarAccess.getTransitionAccess().getSrc_stateAssignment_0_1(), "rule__Transition__Src_stateAssignment_0_1");
			builder.put(grammarAccess.getTransitionAccess().getTar_stateAssignment_2(), "rule__Transition__Tar_stateAssignment_2");
			builder.put(grammarAccess.getTransitionAccess().getTransition_effectAssignment_3(), "rule__Transition__Transition_effectAssignment_3");
			builder.put(grammarAccess.getTransition_effectAccess().getMicrosecondsAssignment_3(), "rule__Transition_effect__MicrosecondsAssignment_3");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_0(), "rule__State__NameAssignment_0");
			builder.put(grammarAccess.getStateAccess().getComponentAssignment_2(), "rule__State__ComponentAssignment_2");
			builder.put(grammarAccess.getStateAccess().getComponent_stateAssignment_5(), "rule__State__Component_stateAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ArduinoGrammarAccess grammarAccess;

	@Override
	protected InternalArduinoParser createParser() {
		InternalArduinoParser result = new InternalArduinoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ArduinoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ArduinoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
