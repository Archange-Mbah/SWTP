/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ArduinoGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentsComponentsParserRuleCall_0_0 = (RuleCall)cComponentsAssignment_0.eContents().get(0);
		private final Assignment cConnectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConnectionConnectionParserRuleCall_1_0 = (RuleCall)cConnectionAssignment_1.eContents().get(0);
		private final Assignment cBehaviorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBehaviorBehaviorParserRuleCall_2_0 = (RuleCall)cBehaviorAssignment_2.eContents().get(0);
		
		///*
		//Bauteilbeschreibung:
		//component LED-RED {
		//    type = {actor},
		//    connectors = [GND, DIGITAL_IN],
		//    states = [ON {DIGITAL_IN = HIGH},
		//    OFF {DIGITAL_IN = LOW}]
		//} ...
		//define ARDUINO {
		//    type = {microcontroller},
		//    connectors = [GND1, GND2, DIGITAL_OUT1 ...
		//}
		//*/
		//Model: components += components* connection=connection behavior=behavior;
		@Override public ParserRule getRule() { return rule; }
		
		//components += components* connection=connection behavior=behavior
		public Group getGroup() { return cGroup; }
		
		//components += components*
		public Assignment getComponentsAssignment_0() { return cComponentsAssignment_0; }
		
		//components
		public RuleCall getComponentsComponentsParserRuleCall_0_0() { return cComponentsComponentsParserRuleCall_0_0; }
		
		//connection=connection
		public Assignment getConnectionAssignment_1() { return cConnectionAssignment_1; }
		
		//connection
		public RuleCall getConnectionConnectionParserRuleCall_1_0() { return cConnectionConnectionParserRuleCall_1_0; }
		
		//behavior=behavior
		public Assignment getBehaviorAssignment_2() { return cBehaviorAssignment_2; }
		
		//behavior
		public RuleCall getBehaviorBehaviorParserRuleCall_2_0() { return cBehaviorBehaviorParserRuleCall_2_0; }
	}
	public class ComponentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.components");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cTypeParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cConnectorsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cConnectorsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cConnectorsConnectorsParserRuleCall_12_0 = (RuleCall)cConnectorsAssignment_12.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cStatesKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cEqualsSignKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cComponent_stateAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cComponent_stateComponent_stateParserRuleCall_15_3_0 = (RuleCall)cComponent_stateAssignment_15_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//components: 'component' name=ID '{'
		//    'type' '=' '{' type '}' ','
		//    'connectors' '=' '[' connectors+=connectors* ']' ','
		//    ('states' '=' '[' component_state+=component_state* ']')*
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		// 'component' name=ID '{'
		//    'type' '=' '{' type '}' ','
		//    'connectors' '=' '[' connectors+=connectors* ']' ','
		//    ('states' '=' '[' component_state+=component_state* ']')*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//type
		public RuleCall getTypeParserRuleCall_6() { return cTypeParserRuleCall_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//'connectors'
		public Keyword getConnectorsKeyword_9() { return cConnectorsKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_11() { return cLeftSquareBracketKeyword_11; }
		
		//connectors+=connectors*
		public Assignment getConnectorsAssignment_12() { return cConnectorsAssignment_12; }
		
		//connectors
		public RuleCall getConnectorsConnectorsParserRuleCall_12_0() { return cConnectorsConnectorsParserRuleCall_12_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }
		
		//','
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }
		
		//('states' '=' '[' component_state+=component_state* ']')*
		public Group getGroup_15() { return cGroup_15; }
		
		//'states'
		public Keyword getStatesKeyword_15_0() { return cStatesKeyword_15_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_15_1() { return cEqualsSignKeyword_15_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_15_2() { return cLeftSquareBracketKeyword_15_2; }
		
		//component_state+=component_state*
		public Assignment getComponent_stateAssignment_15_3() { return cComponent_stateAssignment_15_3; }
		
		//component_state
		public RuleCall getComponent_stateComponent_stateParserRuleCall_15_3_0() { return cComponent_stateComponent_stateParserRuleCall_15_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_15_4() { return cRightSquareBracketKeyword_15_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMicrocontrollerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//type: 'actor' | 'sensor' | 'microcontroller';
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' | 'sensor' | 'microcontroller'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//'sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
		
		//'microcontroller'
		public Keyword getMicrocontrollerKeyword_2() { return cMicrocontrollerKeyword_2; }
	}
	public class ConnectorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.connectors");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGNDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGND1Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGND2Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDIGITAL_INKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cA0Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cANALOG_INKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cANALOG_XKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cANALOG_YKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDIGITAL_BUTTONKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//connectors: 'GND' | 'GND1' | 'GND2' | 'DIGITAL_IN' | 'A0' | 'ANALOG_IN' | 'ANALOG_X' | 'ANALOG_Y' | 'DIGITAL_BUTTON';
		@Override public ParserRule getRule() { return rule; }
		
		//'GND' | 'GND1' | 'GND2' | 'DIGITAL_IN' | 'A0' | 'ANALOG_IN' | 'ANALOG_X' | 'ANALOG_Y' | 'DIGITAL_BUTTON'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'GND'
		public Keyword getGNDKeyword_0() { return cGNDKeyword_0; }
		
		//'GND1'
		public Keyword getGND1Keyword_1() { return cGND1Keyword_1; }
		
		//'GND2'
		public Keyword getGND2Keyword_2() { return cGND2Keyword_2; }
		
		//'DIGITAL_IN'
		public Keyword getDIGITAL_INKeyword_3() { return cDIGITAL_INKeyword_3; }
		
		//'A0'
		public Keyword getA0Keyword_4() { return cA0Keyword_4; }
		
		//'ANALOG_IN'
		public Keyword getANALOG_INKeyword_5() { return cANALOG_INKeyword_5; }
		
		//'ANALOG_X'
		public Keyword getANALOG_XKeyword_6() { return cANALOG_XKeyword_6; }
		
		//'ANALOG_Y'
		public Keyword getANALOG_YKeyword_7() { return cANALOG_YKeyword_7; }
		
		//'DIGITAL_BUTTON'
		public Keyword getDIGITAL_BUTTONKeyword_8() { return cDIGITAL_BUTTONKeyword_8; }
	}
	public class Component_stateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.component_state");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cConnector_definitionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//component_state: name=ID '{' connector_definition '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' connector_definition '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//connector_definition
		public RuleCall getConnector_definitionParserRuleCall_2() { return cConnector_definitionParserRuleCall_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Connector_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.connector_definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConnectorsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLEVELParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//connector_definition: connectors '=' LEVEL;
		@Override public ParserRule getRule() { return rule; }
		
		//connectors '=' LEVEL
		public Group getGroup() { return cGroup; }
		
		//connectors
		public RuleCall getConnectorsParserRuleCall_0() { return cConnectorsParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//LEVEL
		public RuleCall getLEVELParserRuleCall_2() { return cLEVELParserRuleCall_2; }
	}
	public class LEVELElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.LEVEL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHIGHKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLOWKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LEVEL: 'HIGH' | 'LOW';
		@Override public ParserRule getRule() { return rule; }
		
		//'HIGH' | 'LOW'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'HIGH'
		public Keyword getHIGHKeyword_0() { return cHIGHKeyword_0; }
		
		//'LOW'
		public Keyword getLOWKeyword_1() { return cLOWKeyword_1; }
	}
	public class MinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.min");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//min: name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class MaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.max");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//max: name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConnectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConnectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentComponentParserRuleCall_3_0 = (RuleCall)cComponentAssignment_3.eContents().get(0);
		private final Assignment cWiringAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWiringWiringParserRuleCall_4_0 = (RuleCall)cWiringAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*
		//Verdrahtungsbeschreibung
		//connection {
		// new LED-RED LED-RED1
		// new ARDUINO ARDUINO1
		// LED1.GND = ARDUINO1.GND1
		// LED1.DIGITAL_IN = ARDUINO1.DIGITAL_OUT
		//}
		// */
		//connection : {connection} 'connection' '{' component+=component* wiring+=wiring*'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{connection} 'connection' '{' component+=component* wiring+=wiring*'}'
		public Group getGroup() { return cGroup; }
		
		//{connection}
		public Action getConnectionAction_0() { return cConnectionAction_0; }
		
		//'connection'
		public Keyword getConnectionKeyword_1() { return cConnectionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//component+=component*
		public Assignment getComponentAssignment_3() { return cComponentAssignment_3; }
		
		//component
		public RuleCall getComponentComponentParserRuleCall_3_0() { return cComponentComponentParserRuleCall_3_0; }
		
		//wiring+=wiring*
		public Assignment getWiringAssignment_4() { return cWiringAssignment_4; }
		
		//wiring
		public RuleCall getWiringWiringParserRuleCall_4_0() { return cWiringWiringParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cComponentsComponentsCrossReference_1_0 = (CrossReference)cComponentsAssignment_1.eContents().get(0);
		private final RuleCall cComponentsComponentsIDTerminalRuleCall_1_0_1 = (RuleCall)cComponentsComponentsCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//component : 'new' components=[components] name=ID ;
		@Override public ParserRule getRule() { return rule; }
		
		//'new' components=[components] name=ID
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//components=[components]
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }
		
		//[components]
		public CrossReference getComponentsComponentsCrossReference_1_0() { return cComponentsComponentsCrossReference_1_0; }
		
		//ID
		public RuleCall getComponentsComponentsIDTerminalRuleCall_1_0_1() { return cComponentsComponentsIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class WiringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.wiring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSrcComponentCrossReference_0_0 = (CrossReference)cSrcAssignment_0.eContents().get(0);
		private final RuleCall cSrcComponentIDTerminalRuleCall_0_0_1 = (RuleCall)cSrcComponentCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSrc_portAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSrc_portConnectorsParserRuleCall_2_0 = (RuleCall)cSrc_portAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTarComponentCrossReference_4_0 = (CrossReference)cTarAssignment_4.eContents().get(0);
		private final RuleCall cTarComponentIDTerminalRuleCall_4_0_1 = (RuleCall)cTarComponentCrossReference_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTar_portAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTar_portConnectorsParserRuleCall_6_0 = (RuleCall)cTar_portAssignment_6.eContents().get(0);
		
		//wiring : src=[component] '.' src_port=connectors '=' tar=[component] '.' tar_port=connectors;
		@Override public ParserRule getRule() { return rule; }
		
		//src=[component] '.' src_port=connectors '=' tar=[component] '.' tar_port=connectors
		public Group getGroup() { return cGroup; }
		
		//src=[component]
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }
		
		//[component]
		public CrossReference getSrcComponentCrossReference_0_0() { return cSrcComponentCrossReference_0_0; }
		
		//ID
		public RuleCall getSrcComponentIDTerminalRuleCall_0_0_1() { return cSrcComponentIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//src_port=connectors
		public Assignment getSrc_portAssignment_2() { return cSrc_portAssignment_2; }
		
		//connectors
		public RuleCall getSrc_portConnectorsParserRuleCall_2_0() { return cSrc_portConnectorsParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//tar=[component]
		public Assignment getTarAssignment_4() { return cTarAssignment_4; }
		
		//[component]
		public CrossReference getTarComponentCrossReference_4_0() { return cTarComponentCrossReference_4_0; }
		
		//ID
		public RuleCall getTarComponentIDTerminalRuleCall_4_0_1() { return cTarComponentIDTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//tar_port=connectors
		public Assignment getTar_portAssignment_6() { return cTar_portAssignment_6; }
		
		//connectors
		public RuleCall getTar_portConnectorsParserRuleCall_6_0() { return cTar_portConnectorsParserRuleCall_6_0; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBehaviorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStartumlKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesStateParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Assignment cTransitionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTransitionsTransitionParserRuleCall_5_0 = (RuleCall)cTransitionsAssignment_5.eContents().get(0);
		private final Keyword cEndumlKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///*
		//Funktionsbeschreibung
		//behavior {
		//@startuml
		//[*] --> Off
		//Off: LED-RED1.state=OFF
		//Off --> On : delay[1000]
		//On: LED-RED1.state=ON
		//On --> Off : delay[1000]
		//@enduml
		//}
		// *
		// */
		//behavior: {behavior} 'behavior' '{' '@startuml' states+=state* transitions+=transition* '@enduml' '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{behavior} 'behavior' '{' '@startuml' states+=state* transitions+=transition* '@enduml' '}'
		public Group getGroup() { return cGroup; }
		
		//{behavior}
		public Action getBehaviorAction_0() { return cBehaviorAction_0; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_1() { return cBehaviorKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'@startuml'
		public Keyword getStartumlKeyword_3() { return cStartumlKeyword_3; }
		
		//states+=state*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//state
		public RuleCall getStatesStateParserRuleCall_4_0() { return cStatesStateParserRuleCall_4_0; }
		
		//transitions+=transition*
		public Assignment getTransitionsAssignment_5() { return cTransitionsAssignment_5; }
		
		//transition
		public RuleCall getTransitionsTransitionParserRuleCall_5_0() { return cTransitionsTransitionParserRuleCall_5_0; }
		
		//'@enduml'
		public Keyword getEndumlKeyword_6() { return cEndumlKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketAsteriskRightSquareBracketKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cSrc_stateAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cSrc_stateStateCrossReference_0_1_0 = (CrossReference)cSrc_stateAssignment_0_1.eContents().get(0);
		private final RuleCall cSrc_stateStateIDTerminalRuleCall_0_1_0_1 = (RuleCall)cSrc_stateStateCrossReference_0_1_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTar_stateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTar_stateStateCrossReference_2_0 = (CrossReference)cTar_stateAssignment_2.eContents().get(0);
		private final RuleCall cTar_stateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cTar_stateStateCrossReference_2_0.eContents().get(1);
		private final Assignment cTransition_effectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransition_effectTransition_effectParserRuleCall_3_0 = (RuleCall)cTransition_effectAssignment_3.eContents().get(0);
		
		//transition: ( '[*]' |src_state=[state]) '-->' tar_state=[state] transition_effect=transition_effect?;
		@Override public ParserRule getRule() { return rule; }
		
		//( '[*]' |src_state=[state]) '-->' tar_state=[state] transition_effect=transition_effect?
		public Group getGroup() { return cGroup; }
		
		//( '[*]' |src_state=[state])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'[*]'
		public Keyword getLeftSquareBracketAsteriskRightSquareBracketKeyword_0_0() { return cLeftSquareBracketAsteriskRightSquareBracketKeyword_0_0; }
		
		//src_state=[state]
		public Assignment getSrc_stateAssignment_0_1() { return cSrc_stateAssignment_0_1; }
		
		//[state]
		public CrossReference getSrc_stateStateCrossReference_0_1_0() { return cSrc_stateStateCrossReference_0_1_0; }
		
		//ID
		public RuleCall getSrc_stateStateIDTerminalRuleCall_0_1_0_1() { return cSrc_stateStateIDTerminalRuleCall_0_1_0_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1; }
		
		//tar_state=[state]
		public Assignment getTar_stateAssignment_2() { return cTar_stateAssignment_2; }
		
		//[state]
		public CrossReference getTar_stateStateCrossReference_2_0() { return cTar_stateStateCrossReference_2_0; }
		
		//ID
		public RuleCall getTar_stateStateIDTerminalRuleCall_2_0_1() { return cTar_stateStateIDTerminalRuleCall_2_0_1; }
		
		//transition_effect=transition_effect?
		public Assignment getTransition_effectAssignment_3() { return cTransition_effectAssignment_3; }
		
		//transition_effect
		public RuleCall getTransition_effectTransition_effectParserRuleCall_3_0() { return cTransition_effectTransition_effectParserRuleCall_3_0; }
	}
	public class Transition_effectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.transition_effect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDelayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMicrosecondsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMicrosecondsINTTerminalRuleCall_3_0 = (RuleCall)cMicrosecondsAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//transition_effect: ':' 'delay' '[' (microseconds=INT) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//':' 'delay' '[' (microseconds=INT) ']'
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//'delay'
		public Keyword getDelayKeyword_1() { return cDelayKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(microseconds=INT)
		public Assignment getMicrosecondsAssignment_3() { return cMicrosecondsAssignment_3; }
		
		//INT
		public RuleCall getMicrosecondsINTTerminalRuleCall_3_0() { return cMicrosecondsINTTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.state");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cComponentComponentCrossReference_2_0 = (CrossReference)cComponentAssignment_2.eContents().get(0);
		private final RuleCall cComponentComponentIDTerminalRuleCall_2_0_1 = (RuleCall)cComponentComponentCrossReference_2_0.eContents().get(1);
		private final Keyword cStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComponent_stateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cComponent_stateComponent_stateCrossReference_5_0 = (CrossReference)cComponent_stateAssignment_5.eContents().get(0);
		private final RuleCall cComponent_stateComponent_stateFQNParserRuleCall_5_0_1 = (RuleCall)cComponent_stateComponent_stateCrossReference_5_0.eContents().get(1);
		
		//state: name=ID ':' component=[component] '.state' '=' component_state=[component_state|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' component=[component] '.state' '=' component_state=[component_state|FQN]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//component=[component]
		public Assignment getComponentAssignment_2() { return cComponentAssignment_2; }
		
		//[component]
		public CrossReference getComponentComponentCrossReference_2_0() { return cComponentComponentCrossReference_2_0; }
		
		//ID
		public RuleCall getComponentComponentIDTerminalRuleCall_2_0_1() { return cComponentComponentIDTerminalRuleCall_2_0_1; }
		
		//'.state'
		public Keyword getStateKeyword_3() { return cStateKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//component_state=[component_state|FQN]
		public Assignment getComponent_stateAssignment_5() { return cComponent_stateAssignment_5; }
		
		//[component_state|FQN]
		public CrossReference getComponent_stateComponent_stateCrossReference_5_0() { return cComponent_stateComponent_stateCrossReference_5_0; }
		
		//FQN
		public RuleCall getComponent_stateComponent_stateFQNParserRuleCall_5_0_1() { return cComponent_stateComponent_stateFQNParserRuleCall_5_0_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Arduino.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// Full Qualified Name
		//FQN: ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final ComponentsElements pComponents;
	private final TypeElements pType;
	private final ConnectorsElements pConnectors;
	private final Component_stateElements pComponent_state;
	private final Connector_definitionElements pConnector_definition;
	private final LEVELElements pLEVEL;
	private final MinElements pMin;
	private final MaxElements pMax;
	private final ConnectionElements pConnection;
	private final ComponentElements pComponent;
	private final WiringElements pWiring;
	private final BehaviorElements pBehavior;
	private final TransitionElements pTransition;
	private final Transition_effectElements pTransition_effect;
	private final StateElements pState;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArduinoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pComponents = new ComponentsElements();
		this.pType = new TypeElements();
		this.pConnectors = new ConnectorsElements();
		this.pComponent_state = new Component_stateElements();
		this.pConnector_definition = new Connector_definitionElements();
		this.pLEVEL = new LEVELElements();
		this.pMin = new MinElements();
		this.pMax = new MaxElements();
		this.pConnection = new ConnectionElements();
		this.pComponent = new ComponentElements();
		this.pWiring = new WiringElements();
		this.pBehavior = new BehaviorElements();
		this.pTransition = new TransitionElements();
		this.pTransition_effect = new Transition_effectElements();
		this.pState = new StateElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Arduino".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	//Bauteilbeschreibung:
	//component LED-RED {
	//    type = {actor},
	//    connectors = [GND, DIGITAL_IN],
	//    states = [ON {DIGITAL_IN = HIGH},
	//    OFF {DIGITAL_IN = LOW}]
	//} ...
	//define ARDUINO {
	//    type = {microcontroller},
	//    connectors = [GND1, GND2, DIGITAL_OUT1 ...
	//}
	//*/
	//Model: components += components* connection=connection behavior=behavior;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//components: 'component' name=ID '{'
	//    'type' '=' '{' type '}' ','
	//    'connectors' '=' '[' connectors+=connectors* ']' ','
	//    ('states' '=' '[' component_state+=component_state* ']')*
	//'}';
	public ComponentsElements getComponentsAccess() {
		return pComponents;
	}
	
	public ParserRule getComponentsRule() {
		return getComponentsAccess().getRule();
	}
	
	//type: 'actor' | 'sensor' | 'microcontroller';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//connectors: 'GND' | 'GND1' | 'GND2' | 'DIGITAL_IN' | 'A0' | 'ANALOG_IN' | 'ANALOG_X' | 'ANALOG_Y' | 'DIGITAL_BUTTON';
	public ConnectorsElements getConnectorsAccess() {
		return pConnectors;
	}
	
	public ParserRule getConnectorsRule() {
		return getConnectorsAccess().getRule();
	}
	
	//component_state: name=ID '{' connector_definition '}';
	public Component_stateElements getComponent_stateAccess() {
		return pComponent_state;
	}
	
	public ParserRule getComponent_stateRule() {
		return getComponent_stateAccess().getRule();
	}
	
	//connector_definition: connectors '=' LEVEL;
	public Connector_definitionElements getConnector_definitionAccess() {
		return pConnector_definition;
	}
	
	public ParserRule getConnector_definitionRule() {
		return getConnector_definitionAccess().getRule();
	}
	
	//LEVEL: 'HIGH' | 'LOW';
	public LEVELElements getLEVELAccess() {
		return pLEVEL;
	}
	
	public ParserRule getLEVELRule() {
		return getLEVELAccess().getRule();
	}
	
	//min: name=ID;
	public MinElements getMinAccess() {
		return pMin;
	}
	
	public ParserRule getMinRule() {
		return getMinAccess().getRule();
	}
	
	//max: name=ID;
	public MaxElements getMaxAccess() {
		return pMax;
	}
	
	public ParserRule getMaxRule() {
		return getMaxAccess().getRule();
	}
	
	///*
	//Verdrahtungsbeschreibung
	//connection {
	// new LED-RED LED-RED1
	// new ARDUINO ARDUINO1
	// LED1.GND = ARDUINO1.GND1
	// LED1.DIGITAL_IN = ARDUINO1.DIGITAL_OUT
	//}
	// */
	//connection : {connection} 'connection' '{' component+=component* wiring+=wiring*'}';
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//component : 'new' components=[components] name=ID ;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//wiring : src=[component] '.' src_port=connectors '=' tar=[component] '.' tar_port=connectors;
	public WiringElements getWiringAccess() {
		return pWiring;
	}
	
	public ParserRule getWiringRule() {
		return getWiringAccess().getRule();
	}
	
	///*
	//Funktionsbeschreibung
	//behavior {
	//@startuml
	//[*] --> Off
	//Off: LED-RED1.state=OFF
	//Off --> On : delay[1000]
	//On: LED-RED1.state=ON
	//On --> Off : delay[1000]
	//@enduml
	//}
	// *
	// */
	//behavior: {behavior} 'behavior' '{' '@startuml' states+=state* transitions+=transition* '@enduml' '}';
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//transition: ( '[*]' |src_state=[state]) '-->' tar_state=[state] transition_effect=transition_effect?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//transition_effect: ':' 'delay' '[' (microseconds=INT) ']';
	public Transition_effectElements getTransition_effectAccess() {
		return pTransition_effect;
	}
	
	public ParserRule getTransition_effectRule() {
		return getTransition_effectAccess().getRule();
	}
	
	//state: name=ID ':' component=[component] '.state' '=' component_state=[component_state|FQN];
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//// Full Qualified Name
	//FQN: ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
