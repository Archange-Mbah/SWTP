/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.arduino.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.arduino.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ArduinoFactoryImpl extends EFactoryImpl implements ArduinoFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ArduinoFactory init()
  {
    try
    {
      ArduinoFactory theArduinoFactory = (ArduinoFactory)EPackage.Registry.INSTANCE.getEFactory(ArduinoPackage.eNS_URI);
      if (theArduinoFactory != null)
      {
        return theArduinoFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ArduinoFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArduinoFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ArduinoPackage.MODEL: return createModel();
      case ArduinoPackage.COMPONENTS: return createcomponents();
      case ArduinoPackage.COMPONENT_STATE: return createcomponent_state();
      case ArduinoPackage.MIN: return createmin();
      case ArduinoPackage.MAX: return createmax();
      case ArduinoPackage.CONNECTION: return createconnection();
      case ArduinoPackage.COMPONENT: return createcomponent();
      case ArduinoPackage.WIRING: return createwiring();
      case ArduinoPackage.BEHAVIOR: return createbehavior();
      case ArduinoPackage.TRANSITION: return createtransition();
      case ArduinoPackage.TRANSITION_EFFECT: return createtransition_effect();
      case ArduinoPackage.STATE: return createstate();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public components createcomponents()
  {
    componentsImpl components = new componentsImpl();
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public component_state createcomponent_state()
  {
    component_stateImpl component_state = new component_stateImpl();
    return component_state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public min createmin()
  {
    minImpl min = new minImpl();
    return min;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public max createmax()
  {
    maxImpl max = new maxImpl();
    return max;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public connection createconnection()
  {
    connectionImpl connection = new connectionImpl();
    return connection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public component createcomponent()
  {
    componentImpl component = new componentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public wiring createwiring()
  {
    wiringImpl wiring = new wiringImpl();
    return wiring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public behavior createbehavior()
  {
    behaviorImpl behavior = new behaviorImpl();
    return behavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public transition createtransition()
  {
    transitionImpl transition = new transitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public transition_effect createtransition_effect()
  {
    transition_effectImpl transition_effect = new transition_effectImpl();
    return transition_effect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public state createstate()
  {
    stateImpl state = new stateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArduinoPackage getArduinoPackage()
  {
    return (ArduinoPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ArduinoPackage getPackage()
  {
    return ArduinoPackage.eINSTANCE;
  }

} //ArduinoFactoryImpl
