/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.arduino.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.arduino.ArduinoPackage;
import org.xtext.example.mydsl.arduino.component;
import org.xtext.example.mydsl.arduino.component_state;
import org.xtext.example.mydsl.arduino.state;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>state</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.stateImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.stateImpl#getComponent <em>Component</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.stateImpl#getComponent_state <em>Component state</em>}</li>
 * </ul>
 *
 * @generated
 */
public class stateImpl extends MinimalEObjectImpl.Container implements state
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getComponent() <em>Component</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponent()
   * @generated
   * @ordered
   */
  protected component component;

  /**
   * The cached value of the '{@link #getComponent_state() <em>Component state</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponent_state()
   * @generated
   * @ordered
   */
  protected component_state component_state;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected stateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArduinoPackage.Literals.STATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoPackage.STATE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public component getComponent()
  {
    if (component != null && component.eIsProxy())
    {
      InternalEObject oldComponent = (InternalEObject)component;
      component = (component)eResolveProxy(oldComponent);
      if (component != oldComponent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ArduinoPackage.STATE__COMPONENT, oldComponent, component));
      }
    }
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public component basicGetComponent()
  {
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComponent(component newComponent)
  {
    component oldComponent = component;
    component = newComponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoPackage.STATE__COMPONENT, oldComponent, component));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public component_state getComponent_state()
  {
    if (component_state != null && component_state.eIsProxy())
    {
      InternalEObject oldComponent_state = (InternalEObject)component_state;
      component_state = (component_state)eResolveProxy(oldComponent_state);
      if (component_state != oldComponent_state)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ArduinoPackage.STATE__COMPONENT_STATE, oldComponent_state, component_state));
      }
    }
    return component_state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public component_state basicGetComponent_state()
  {
    return component_state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComponent_state(component_state newComponent_state)
  {
    component_state oldComponent_state = component_state;
    component_state = newComponent_state;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoPackage.STATE__COMPONENT_STATE, oldComponent_state, component_state));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArduinoPackage.STATE__NAME:
        return getName();
      case ArduinoPackage.STATE__COMPONENT:
        if (resolve) return getComponent();
        return basicGetComponent();
      case ArduinoPackage.STATE__COMPONENT_STATE:
        if (resolve) return getComponent_state();
        return basicGetComponent_state();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArduinoPackage.STATE__NAME:
        setName((String)newValue);
        return;
      case ArduinoPackage.STATE__COMPONENT:
        setComponent((component)newValue);
        return;
      case ArduinoPackage.STATE__COMPONENT_STATE:
        setComponent_state((component_state)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArduinoPackage.STATE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ArduinoPackage.STATE__COMPONENT:
        setComponent((component)null);
        return;
      case ArduinoPackage.STATE__COMPONENT_STATE:
        setComponent_state((component_state)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArduinoPackage.STATE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ArduinoPackage.STATE__COMPONENT:
        return component != null;
      case ArduinoPackage.STATE__COMPONENT_STATE:
        return component_state != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //stateImpl
