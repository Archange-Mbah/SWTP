/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.arduino.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.arduino.ArduinoPackage;
import org.xtext.example.mydsl.arduino.state;
import org.xtext.example.mydsl.arduino.transition;
import org.xtext.example.mydsl.arduino.transition_effect;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>transition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.transitionImpl#getSrc_state <em>Src state</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.transitionImpl#getTar_state <em>Tar state</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.transitionImpl#getTransition_effect <em>Transition effect</em>}</li>
 * </ul>
 *
 * @generated
 */
public class transitionImpl extends MinimalEObjectImpl.Container implements transition
{
  /**
   * The cached value of the '{@link #getSrc_state() <em>Src state</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrc_state()
   * @generated
   * @ordered
   */
  protected state src_state;

  /**
   * The cached value of the '{@link #getTar_state() <em>Tar state</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTar_state()
   * @generated
   * @ordered
   */
  protected state tar_state;

  /**
   * The cached value of the '{@link #getTransition_effect() <em>Transition effect</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransition_effect()
   * @generated
   * @ordered
   */
  protected transition_effect transition_effect;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected transitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArduinoPackage.Literals.TRANSITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public state getSrc_state()
  {
    if (src_state != null && src_state.eIsProxy())
    {
      InternalEObject oldSrc_state = (InternalEObject)src_state;
      src_state = (state)eResolveProxy(oldSrc_state);
      if (src_state != oldSrc_state)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ArduinoPackage.TRANSITION__SRC_STATE, oldSrc_state, src_state));
      }
    }
    return src_state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public state basicGetSrc_state()
  {
    return src_state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSrc_state(state newSrc_state)
  {
    state oldSrc_state = src_state;
    src_state = newSrc_state;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoPackage.TRANSITION__SRC_STATE, oldSrc_state, src_state));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public state getTar_state()
  {
    if (tar_state != null && tar_state.eIsProxy())
    {
      InternalEObject oldTar_state = (InternalEObject)tar_state;
      tar_state = (state)eResolveProxy(oldTar_state);
      if (tar_state != oldTar_state)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ArduinoPackage.TRANSITION__TAR_STATE, oldTar_state, tar_state));
      }
    }
    return tar_state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public state basicGetTar_state()
  {
    return tar_state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTar_state(state newTar_state)
  {
    state oldTar_state = tar_state;
    tar_state = newTar_state;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoPackage.TRANSITION__TAR_STATE, oldTar_state, tar_state));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public transition_effect getTransition_effect()
  {
    return transition_effect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTransition_effect(transition_effect newTransition_effect, NotificationChain msgs)
  {
    transition_effect oldTransition_effect = transition_effect;
    transition_effect = newTransition_effect;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArduinoPackage.TRANSITION__TRANSITION_EFFECT, oldTransition_effect, newTransition_effect);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransition_effect(transition_effect newTransition_effect)
  {
    if (newTransition_effect != transition_effect)
    {
      NotificationChain msgs = null;
      if (transition_effect != null)
        msgs = ((InternalEObject)transition_effect).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArduinoPackage.TRANSITION__TRANSITION_EFFECT, null, msgs);
      if (newTransition_effect != null)
        msgs = ((InternalEObject)newTransition_effect).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArduinoPackage.TRANSITION__TRANSITION_EFFECT, null, msgs);
      msgs = basicSetTransition_effect(newTransition_effect, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoPackage.TRANSITION__TRANSITION_EFFECT, newTransition_effect, newTransition_effect));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ArduinoPackage.TRANSITION__TRANSITION_EFFECT:
        return basicSetTransition_effect(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArduinoPackage.TRANSITION__SRC_STATE:
        if (resolve) return getSrc_state();
        return basicGetSrc_state();
      case ArduinoPackage.TRANSITION__TAR_STATE:
        if (resolve) return getTar_state();
        return basicGetTar_state();
      case ArduinoPackage.TRANSITION__TRANSITION_EFFECT:
        return getTransition_effect();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArduinoPackage.TRANSITION__SRC_STATE:
        setSrc_state((state)newValue);
        return;
      case ArduinoPackage.TRANSITION__TAR_STATE:
        setTar_state((state)newValue);
        return;
      case ArduinoPackage.TRANSITION__TRANSITION_EFFECT:
        setTransition_effect((transition_effect)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArduinoPackage.TRANSITION__SRC_STATE:
        setSrc_state((state)null);
        return;
      case ArduinoPackage.TRANSITION__TAR_STATE:
        setTar_state((state)null);
        return;
      case ArduinoPackage.TRANSITION__TRANSITION_EFFECT:
        setTransition_effect((transition_effect)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArduinoPackage.TRANSITION__SRC_STATE:
        return src_state != null;
      case ArduinoPackage.TRANSITION__TAR_STATE:
        return tar_state != null;
      case ArduinoPackage.TRANSITION__TRANSITION_EFFECT:
        return transition_effect != null;
    }
    return super.eIsSet(featureID);
  }

} //transitionImpl
