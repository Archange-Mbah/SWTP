/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.arduino.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.arduino.ArduinoPackage;
import org.xtext.example.mydsl.arduino.component;
import org.xtext.example.mydsl.arduino.connection;
import org.xtext.example.mydsl.arduino.wiring;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>connection</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.connectionImpl#getComponent <em>Component</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.connectionImpl#getWiring <em>Wiring</em>}</li>
 * </ul>
 *
 * @generated
 */
public class connectionImpl extends MinimalEObjectImpl.Container implements connection
{
  /**
   * The cached value of the '{@link #getComponent() <em>Component</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponent()
   * @generated
   * @ordered
   */
  protected EList<component> component;

  /**
   * The cached value of the '{@link #getWiring() <em>Wiring</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWiring()
   * @generated
   * @ordered
   */
  protected EList<wiring> wiring;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected connectionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArduinoPackage.Literals.CONNECTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<component> getComponent()
  {
    if (component == null)
    {
      component = new EObjectContainmentEList<component>(component.class, this, ArduinoPackage.CONNECTION__COMPONENT);
    }
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<wiring> getWiring()
  {
    if (wiring == null)
    {
      wiring = new EObjectContainmentEList<wiring>(wiring.class, this, ArduinoPackage.CONNECTION__WIRING);
    }
    return wiring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ArduinoPackage.CONNECTION__COMPONENT:
        return ((InternalEList<?>)getComponent()).basicRemove(otherEnd, msgs);
      case ArduinoPackage.CONNECTION__WIRING:
        return ((InternalEList<?>)getWiring()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArduinoPackage.CONNECTION__COMPONENT:
        return getComponent();
      case ArduinoPackage.CONNECTION__WIRING:
        return getWiring();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArduinoPackage.CONNECTION__COMPONENT:
        getComponent().clear();
        getComponent().addAll((Collection<? extends component>)newValue);
        return;
      case ArduinoPackage.CONNECTION__WIRING:
        getWiring().clear();
        getWiring().addAll((Collection<? extends wiring>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArduinoPackage.CONNECTION__COMPONENT:
        getComponent().clear();
        return;
      case ArduinoPackage.CONNECTION__WIRING:
        getWiring().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArduinoPackage.CONNECTION__COMPONENT:
        return component != null && !component.isEmpty();
      case ArduinoPackage.CONNECTION__WIRING:
        return wiring != null && !wiring.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //connectionImpl
