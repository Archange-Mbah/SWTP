/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.arduino.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.arduino.ArduinoPackage;
import org.xtext.example.mydsl.arduino.component;
import org.xtext.example.mydsl.arduino.wiring;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>wiring</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.wiringImpl#getSrc <em>Src</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.wiringImpl#getSrc_port <em>Src port</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.wiringImpl#getTar <em>Tar</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.arduino.impl.wiringImpl#getTar_port <em>Tar port</em>}</li>
 * </ul>
 *
 * @generated
 */
public class wiringImpl extends MinimalEObjectImpl.Container implements wiring
{
  /**
   * The cached value of the '{@link #getSrc() <em>Src</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrc()
   * @generated
   * @ordered
   */
  protected component src;

  /**
   * The default value of the '{@link #getSrc_port() <em>Src port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrc_port()
   * @generated
   * @ordered
   */
  protected static final String SRC_PORT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSrc_port() <em>Src port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrc_port()
   * @generated
   * @ordered
   */
  protected String src_port = SRC_PORT_EDEFAULT;

  /**
   * The cached value of the '{@link #getTar() <em>Tar</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTar()
   * @generated
   * @ordered
   */
  protected component tar;

  /**
   * The default value of the '{@link #getTar_port() <em>Tar port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTar_port()
   * @generated
   * @ordered
   */
  protected static final String TAR_PORT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTar_port() <em>Tar port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTar_port()
   * @generated
   * @ordered
   */
  protected String tar_port = TAR_PORT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected wiringImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArduinoPackage.Literals.WIRING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public component getSrc()
  {
    if (src != null && src.eIsProxy())
    {
      InternalEObject oldSrc = (InternalEObject)src;
      src = (component)eResolveProxy(oldSrc);
      if (src != oldSrc)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ArduinoPackage.WIRING__SRC, oldSrc, src));
      }
    }
    return src;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public component basicGetSrc()
  {
    return src;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSrc(component newSrc)
  {
    component oldSrc = src;
    src = newSrc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoPackage.WIRING__SRC, oldSrc, src));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSrc_port()
  {
    return src_port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSrc_port(String newSrc_port)
  {
    String oldSrc_port = src_port;
    src_port = newSrc_port;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoPackage.WIRING__SRC_PORT, oldSrc_port, src_port));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public component getTar()
  {
    if (tar != null && tar.eIsProxy())
    {
      InternalEObject oldTar = (InternalEObject)tar;
      tar = (component)eResolveProxy(oldTar);
      if (tar != oldTar)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ArduinoPackage.WIRING__TAR, oldTar, tar));
      }
    }
    return tar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public component basicGetTar()
  {
    return tar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTar(component newTar)
  {
    component oldTar = tar;
    tar = newTar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoPackage.WIRING__TAR, oldTar, tar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTar_port()
  {
    return tar_port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTar_port(String newTar_port)
  {
    String oldTar_port = tar_port;
    tar_port = newTar_port;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoPackage.WIRING__TAR_PORT, oldTar_port, tar_port));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArduinoPackage.WIRING__SRC:
        if (resolve) return getSrc();
        return basicGetSrc();
      case ArduinoPackage.WIRING__SRC_PORT:
        return getSrc_port();
      case ArduinoPackage.WIRING__TAR:
        if (resolve) return getTar();
        return basicGetTar();
      case ArduinoPackage.WIRING__TAR_PORT:
        return getTar_port();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArduinoPackage.WIRING__SRC:
        setSrc((component)newValue);
        return;
      case ArduinoPackage.WIRING__SRC_PORT:
        setSrc_port((String)newValue);
        return;
      case ArduinoPackage.WIRING__TAR:
        setTar((component)newValue);
        return;
      case ArduinoPackage.WIRING__TAR_PORT:
        setTar_port((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArduinoPackage.WIRING__SRC:
        setSrc((component)null);
        return;
      case ArduinoPackage.WIRING__SRC_PORT:
        setSrc_port(SRC_PORT_EDEFAULT);
        return;
      case ArduinoPackage.WIRING__TAR:
        setTar((component)null);
        return;
      case ArduinoPackage.WIRING__TAR_PORT:
        setTar_port(TAR_PORT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArduinoPackage.WIRING__SRC:
        return src != null;
      case ArduinoPackage.WIRING__SRC_PORT:
        return SRC_PORT_EDEFAULT == null ? src_port != null : !SRC_PORT_EDEFAULT.equals(src_port);
      case ArduinoPackage.WIRING__TAR:
        return tar != null;
      case ArduinoPackage.WIRING__TAR_PORT:
        return TAR_PORT_EDEFAULT == null ? tar_port != null : !TAR_PORT_EDEFAULT.equals(tar_port);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (src_port: ");
    result.append(src_port);
    result.append(", tar_port: ");
    result.append(tar_port);
    result.append(')');
    return result.toString();
  }

} //wiringImpl
